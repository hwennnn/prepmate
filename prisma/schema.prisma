generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String        @id @default(cuid())
  name                   String?
  email                  String?       @unique
  emailVerified          DateTime?
  image                  String?
  hasCompletedOnboarding Boolean       @default(false)
  accounts               Account[]
  sessions               Session[]
  profiles               UserProfile[]
}

model UserProfile {
  id          String       @id @default(cuid())
  userId      String
  profileName String       @default("Default Profile")
  isDefault   Boolean      @default(false)
  firstName   String
  lastName    String
  email       String
  phoneNumber String?
  website     String?
  linkedinUrl String?
  githubUrl   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  education   Education[]
  experience  Experience[]
  projects    Project[]
  resume      Resume[]
  skills      Skills?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String      @id @default(cuid())
  profileId   String
  institution String
  degree      String
  isAttending Boolean     @default(false)
  startDate   DateTime
  endDate     DateTime
  gpa         String?
  awards      String?
  coursework  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String      @id @default(cuid())
  profileId    String
  company      String
  jobTitle     String
  location     String
  isCurrentJob Boolean     @default(false)
  startDate    DateTime
  endDate      DateTime?
  technologies String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  achievements String[]
  profile      UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Project {
  id           String      @id @default(cuid())
  profileId    String
  name         String
  description  String
  url          String?
  technologies String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  achievements String[]
  profile      UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Skills {
  id         String      @id @default(cuid())
  profileId  String      @unique
  languages  String?
  frameworks String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  profile    UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id
  name        String
  description String
  resumes     Resume[]
}

model Resume {
  id           String             @id @default(cuid())
  templateId   String
  profileId    String
  resumeName   String
  firstName    String
  lastName     String
  email        String
  phoneNumber  String?
  website      String?
  linkedinUrl  String?
  githubUrl    String?
  profile      UserProfile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  template     Template           @relation(fields: [templateId], references: [id], onDelete: Cascade)
  education    ResumeEducation[]
  experience   ResumeExperience[]
  projects     ResumeProject[]
  skills       ResumeSkills?
  isPublic     Boolean            @default(false)
  PublicResume PublicResume?
}

model ResumeEducation {
  id          String   @id @default(cuid())
  resumeId    String
  institution String
  degree      String
  isAttending Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime
  gpa         String?
  awards      String?
  coursework  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeExperience {
  id           String    @id @default(cuid())
  resumeId     String
  company      String
  jobTitle     String
  location     String
  isCurrentJob Boolean   @default(false)
  startDate    DateTime
  endDate      DateTime?
  achievements String[]
  technologies String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  resume       Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeProject {
  id           String   @id @default(cuid())
  resumeId     String
  name         String
  description  String
  url          String?
  achievements String[]
  technologies String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ResumeSkills {
  id         String   @id @default(cuid())
  resumeId   String   @unique
  languages  String?
  frameworks String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model PublicResume {
  id        String   @id @default(cuid())
  resumeId  String   @unique
  slug      String   @unique
  viewCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
